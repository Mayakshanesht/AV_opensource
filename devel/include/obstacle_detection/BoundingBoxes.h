// Generated by gencpp from file obstacle_detection/BoundingBoxes.msg
// DO NOT EDIT!


#ifndef OBSTACLE_DETECTION_MESSAGE_BOUNDINGBOXES_H
#define OBSTACLE_DETECTION_MESSAGE_BOUNDINGBOXES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <obstacle_detection/BoundingBox.h>

namespace obstacle_detection
{
template <class ContainerAllocator>
struct BoundingBoxes_
{
  typedef BoundingBoxes_<ContainerAllocator> Type;

  BoundingBoxes_()
    : BoundingBoxes()  {
    }
  BoundingBoxes_(const ContainerAllocator& _alloc)
    : BoundingBoxes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::obstacle_detection::BoundingBox_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::obstacle_detection::BoundingBox_<ContainerAllocator> >> _BoundingBoxes_type;
  _BoundingBoxes_type BoundingBoxes;





  typedef boost::shared_ptr< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBoxes_

typedef ::obstacle_detection::BoundingBoxes_<std::allocator<void> > BoundingBoxes;

typedef boost::shared_ptr< ::obstacle_detection::BoundingBoxes > BoundingBoxesPtr;
typedef boost::shared_ptr< ::obstacle_detection::BoundingBoxes const> BoundingBoxesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::obstacle_detection::BoundingBoxes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::obstacle_detection::BoundingBoxes_<ContainerAllocator1> & lhs, const ::obstacle_detection::BoundingBoxes_<ContainerAllocator2> & rhs)
{
  return lhs.BoundingBoxes == rhs.BoundingBoxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::obstacle_detection::BoundingBoxes_<ContainerAllocator1> & lhs, const ::obstacle_detection::BoundingBoxes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace obstacle_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c87179ebc264f92e8bbb6eaab4093103";
  }

  static const char* value(const ::obstacle_detection::BoundingBoxes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc87179ebc264f92eULL;
  static const uint64_t static_value2 = 0x8bbb6eaab4093103ULL;
};

template<class ContainerAllocator>
struct DataType< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "obstacle_detection/BoundingBoxes";
  }

  static const char* value(const ::obstacle_detection::BoundingBoxes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BoundingBox[] BoundingBoxes\n"
"================================================================================\n"
"MSG: obstacle_detection/BoundingBox\n"
"float32 center_x\n"
"float32 center_y\n"
"float32 w\n"
"float32 h\n"
"float32 confidence\n"
"float32 classid\n"
;
  }

  static const char* value(const ::obstacle_detection::BoundingBoxes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BoundingBoxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBoxes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::obstacle_detection::BoundingBoxes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::obstacle_detection::BoundingBoxes_<ContainerAllocator>& v)
  {
    s << indent << "BoundingBoxes[]" << std::endl;
    for (size_t i = 0; i < v.BoundingBoxes.size(); ++i)
    {
      s << indent << "  BoundingBoxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::obstacle_detection::BoundingBox_<ContainerAllocator> >::stream(s, indent + "    ", v.BoundingBoxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBSTACLE_DETECTION_MESSAGE_BOUNDINGBOXES_H
